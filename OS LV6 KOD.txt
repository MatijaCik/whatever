1. Napišite program koji simulira First-fit algoritam za dodjeljivanje memorije.

student04@linux:~$ touch zad1k.c
student04@linux:~$ nano zad1k.c

#include<bits/stdc++.h> 
using namespace std;
void firstFit(int blockSize[], int m,  int processSize[], int n) 
{ 
    int allocation[n]; 
    memset(allocation, -1, sizeof(allocation)); 
    for (int i = 0; i < n; i++) 
    { 
        for (int j = 0; j < m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                // allocate block j to p[i] process 
                allocation[i] = j; 
                // Reduce available memory in this block. 
                blockSize[j] -= processSize[i]; 
                break; 
            } 
        } 
    } 
    cout << "\nProcess No.\tProcess Size\tBlock no.\n"; 
    for (int i = 0; i < n; i++) 
    { 
        cout << " " << i+1 << "\t\t" 
             << processSize[i] << "\t\t"; 
        if (allocation[i] != -1) 
            cout << allocation[i] + 1; 
        else
            cout << "Not Allocated"; 
        cout << endl; 
    } 
} 
int main() 
{ 
    int blockSize[] = {100, 500, 200, 300, 600}; 
    int processSize[] = {212, 417, 112, 426}; 
    int m = sizeof(blockSize) / sizeof(blockSize[0]); 
    int n = sizeof(processSize) / sizeof(processSize[0]); 
    firstFit(blockSize, m, processSize, n); 
    return 0 ; 
}

student04@linux:~$ g++ zad1k.c -o zad1k
student04@linux:~$ ./zad1k

Process No.     Process Size    Block no.
 1              212             2
 2              417             5
 3              112             2
 4              426             Not Allocated

2. Napišite program koji simulira Worst-fit algoritam za dodjeljivanje memorije.

student04@linux:~$ touch zad2k.c
student04@linux:~$ nano zad2k.c

#include<bits/stdc++.h> 
using namespace std; 


void worstFit(int blockSize[], int m, int processSize[],
                                                 int n) 
{ 

    int allocation[n]; 

    memset(allocation, -1, sizeof(allocation)); 


    for (int i=0; i<n; i++) 
    { 
        int wstIdx = -1; 
        for (int j=0; j<m; j++) 
        { 
            if (blockSize[j] >= processSize[i]) 
            { 
                if (wstIdx == -1) 
                    wstIdx = j; 
                else if (blockSize[wstIdx] < blockSize[j]) 
                    wstIdx = j; 
            } 
        } 


        if (wstIdx != -1) 
        { 

            allocation[i] = wstIdx; 


            blockSize[wstIdx] -= processSize[i]; 
        } 
    } 

    cout << "\nProcess No.\tProcess Size\tBlock no.\n"; 
    for (int i = 0; i < n; i++) 
    { 
        cout << "   " << i+1 << "\t\t" << processSize[i] << "\t\t"; 
        if (allocation[i] != -1) 
            cout << allocation[i] + 1; 
        else
            cout << "Not Allocated"; 
        cout << endl; 
    } 
} 

int main() 
{ 
    int blockSize[] = {100, 500, 200, 300, 600}; 
    int processSize[] = {212, 417, 112, 426}; 
    int m = sizeof(blockSize)/sizeof(blockSize[0]); 
    int n = sizeof(processSize)/sizeof(processSize[0]); 

    worstFit(blockSize, m, processSize, n); 

    return 0 ; 
}

student04@linux:~$ g++ zad2k.c -o zad2k
./zad2k

Process No.     Process Size    Block no.
   1            212             5
   2            417             2
   3            112             5
   4            426             Not Allocated
