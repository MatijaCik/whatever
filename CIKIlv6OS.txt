1.


#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m, i, j;
    printf("Unesite broj procesa: ");
    scanf("%d", &n);
    printf("Unesite broj memorijskih blokova: ");
    scanf("%d", &m);

    int *processSize = (int *) calloc(n, sizeof(int));
    int *blockSize = (int *) calloc(m, sizeof(int));
    int *allocation = (int *) calloc(n, sizeof(int));

    for (i = 0; i < n; i++) {
        allocation[i] = -1; 
    }

    printf("Unesite velicine procesa:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &processSize[i]);

    printf("Unesite velicine blokova:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &blockSize[i]);

    for (i = 0; i < n; i++) { 
        for (j = 0; j < m; j++) { 
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i]; 
                break; 
            }
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    free(processSize);
    free(blockSize);
    free(allocation);

    return 0;
}



2.

#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m, i, j;
    printf("Unesite broj procesa: ");
    scanf("%d", &n);
    printf("Unesite broj memorijskih blokova: ");
    scanf("%d", &m);

    int *processSize = (int *) calloc(n, sizeof(int));
    int *blockSize = (int *) calloc(m, sizeof(int));
    int *allocation = (int *) calloc(n, sizeof(int));

    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    printf("Unesite velicine procesa:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &processSize[i]);

    printf("Unesite velicine blokova:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &blockSize[i]);

    for (i = 0; i < n; i++) { 
        int worstIdx = -1;
        for (j = 0; j < m; j++) { 
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }
        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i];
        }
    }

    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    free(processSize);
    free(blockSize);
    free(allocation);

    return 0;
}
