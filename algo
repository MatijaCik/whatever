#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX 100

typedef struct cvor {
    char podatak;
    struct cvor *lijevi;
    struct cvor *desni;
} CVOR;

// Funkcija za stvaranje novog čvora
CVOR* noviCvor(char podatak) {
    CVOR* novi = (CVOR*) malloc(sizeof(CVOR));
    novi->podatak = podatak;
    novi->lijevi = NULL;
    novi->desni = NULL;
    return novi;
}

// Dodavanje podatka u poredano binarno stablo
CVOR* dodaj(CVOR* korijen, char podatak) {
    if (korijen == NULL)
        return noviCvor(podatak);

    if (podatak < korijen->podatak)
        korijen->lijevi = dodaj(korijen->lijevi, podatak);
    else
        korijen->desni = dodaj(korijen->desni, podatak);

    return korijen;
}

// Preorder obilazak (NLD)
void preorder(CVOR* korijen) {
    if (korijen != NULL) {
        printf("%c ", korijen->podatak);
        preorder(korijen->lijevi);
        preorder(korijen->desni);
    }
}

// Inorder obilazak (LND)
void inorder(CVOR* korijen) {
    if (korijen != NULL) {
        inorder(korijen->lijevi);
        printf("%c ", korijen->podatak);
        inorder(korijen->desni);
    }
}

// Postorder obilazak (LDN)
void postorder(CVOR* korijen) {
    if (korijen != NULL) {
        postorder(korijen->lijevi);
        postorder(korijen->desni);
        printf("%c ", korijen->podatak);
    }
}

int main() {
    char unos[MAX];
    printf("Unesite ime i prezime: ");
    fgets(unos, MAX, stdin);

    CVOR* korijen = NULL;

    for (int i = 0; unos[i] != '\0'; i++) {
        if (isalpha(unos[i])) {
            char znak = toupper(unos[i]);  // sve pretvori u velika slova
            korijen = dodaj(korijen, znak);
        }
    }

    printf("\nPreorder obilazak: ");
    preorder(korijen);
    printf("\n");

    printf("Inorder obilazak: ");
    inorder(korijen);
    printf("\n");

    printf("Postorder obilazak: ");
    postorder(korijen);
    printf("\n");

    return 0;
}
