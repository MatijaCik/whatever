1. 
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        // Dijete
        printf("Dijete: PID = %d, PPID = %d\n", getpid(), getppid());
    } else if (pid > 0) {
        // Roditelj
        printf("Roditelj: PID = %d, PPID = %d\n", getpid(), getppid());
    } else {
        perror("fork");
    }

    return 0;
}


2.


#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        // Dijete izvršava ls -l
        execl("/bin/ls", "ls", "-l", NULL);
        perror("execl"); // Ako execl ne uspije
    } else if (pid > 0) {
        // Roditelj čeka dijete
        wait(NULL);
        printf("Roditelj: zavrsio ls -l\n");
    } else {
        perror("fork");
    }

    return 0;
}


3.


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int broj;

    printf("Unesi broj [1-10000]: ");
    scanf("%d", &broj);

    if (broj < 1 || broj > 10000) {
        printf("Neispravan broj.\n");
        return 1;
    }

    pid_t pid = fork();

    if (pid == 0) {
        // Dijete rastavlja broj
        int znamenke[5], i = 0;
        while (broj > 0) {
            znamenke[i++] = broj % 10;
            broj /= 10;
        }

        printf("Dijete: znamenke (od kraja): ");
        for (int j = i - 1; j >= 0; j--)
            printf("%d ", znamenke[j]);
        printf("\n");
    } else if (pid > 0) {
        wait(NULL);
        printf("Roditelj: dijete završilo.\n");
    } else {
        perror("fork");
    }

    return 0;
}



4.


 #include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/wait.h>
#include <sys/shm.h>

int main() {
    int broj;

    printf("Unesi broj [1-10000]: ");
    scanf("%d", &broj);

    if (broj < 1 || broj > 10000) {
        printf("Neispravan broj.\n");
        return 1;
    }

    // Alokacija dijeljene memorije
    int shmid = shmget(IPC_PRIVATE, 10 * sizeof(int), IPC_CREAT | 0666);
    if (shmid == -1) {
        perror("shmget");
        return 1;
    }

    pid_t pid = fork();

    if (pid == 0) {
        // Dijete
        int *niz = (int *)shmat(shmid, NULL, 0);
        int i = 0;
        while (broj > 0) {
            niz[i++] = broj % 10;
            broj /= 10;
        }
        niz[i] = -1; // oznaka kraja
        shmdt(niz);
    } else if (pid > 0) {
        // Roditelj
        wait(NULL);
        int *niz = (int *)shmat(shmid, NULL, 0);
        printf("Roditelj: znamenke (od kraja): ");
        for (int i = 0; niz[i] != -1; i++)
            printf("%d ", niz[i]);
        printf("\n");
        shmdt(niz);
        shmctl(shmid, IPC_RMID, NULL);
    } else {
        perror("fork");
    }

    return 0;
}



5.


#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        // Dijete odmah završava
        printf("Dijete završava (PID: %d)\n", getpid());
        exit(0);
    } else if (pid > 0) {
        // Roditelj čeka
        sleep(30);
        printf("Roditelj završava (PID: %d)\n", getpid());
    }

    return 0;
}
